target-version = "py39"  # Pin Ruff to Python 3.9
line-length = 88
output-format = "full"

[format]
quote-style = "double"
docstring-code-format = true

[lint]
select = [
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    "BLE",   # flake8-blind-except
    "C4",    # flake8-comprehensions
    "D",     # pydocstyle
    "D212",  # Multi-line docstring summary should start at the first line
    "D417",  # Missing argument description in the docstring for `{definition}`: `{name}`
    "DTZ",   # flake8-datetimez
    "E",     # pycodestyle
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "F",     # pyflakes
    "FA",    # flake8-future-annotations
    "FIX",   # flake8-fixme
    "FLY",   # flynt
    "FURB",  # refurb
    "G",     # flake8-logging-format
    "I",     # isort
    "ICN",   # flake8-import-conventions
    "INT",   # flake8-gettext
    "ISC",   # flake8-implicit-str-concat
    "LOG",   # flake8-logging
    "N",     # pep8-naming
    "PERF",  # perflint
    "PGH",   # pygrep-hooks
    "PIE",   # flake8-pie
    "PLC",    # pylint
    "PLE",    # pylint
    "PLW",    # pylint
    "PT",    # flake8-pytest-style
    "PTH",   # flake8-use-pathlib
    "Q",     # flake8-quotes
    "RET",   # flake8-return
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "S",     # flake8-bandit
    "SIM",   # flake8-simplify
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "T10",   # flake8-debugger
    "TC",    # flake8-type-checking
    "TD",    # flake8-todos
    "TID",   # flake8-tidy-imports
    "TRY",   # tryceratops
    "UP",    # pyupgrade
    "W",     # pycodestyle
    "W",     # pycodestyle
    "YTT",   # flake8-2020
]
ignore = [
    # pydocstyle
    "D100",  # Missing docstring in public module
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in `__init__`
    "D400",  # First line should end with a period
    # pycodestyle
    "E501",  # Ignore line length errors (we use auto-formatting)
]

[lint.per-file-ignores]
"tests/*" = [
    "ANN",  # tests don't need annotations
    "S101",  # allow use of assert
    "SLF001",  # allow private member access
]

[lint.flake8-type-checking]
exempt-modules = []
strict = true

[lint.isort]
forced-separate = [
    "tests",
]
required-imports = [
    "from __future__ import annotations",
]

[lint.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]
ignore-var-parameters = true
